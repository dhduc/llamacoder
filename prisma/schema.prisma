generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model GeneratedApp {
  id        String   @id @default(nanoid(5))
  model     String
  prompt    String
  code      String
  createdAt DateTime @default(now())

  @@index([id])
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]
  Chat          Chat[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Chat {
  id                String    @id @default(nanoid(16))
  userId            String
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  model             String
  quality           String
  prompt            String
  title             String
  screenshot        String?
  llamaCoderVersion String    @default("v2")
  shadcn            Boolean
  isPublic          Boolean   @default(true)
  messages          Message[]
  createdAt         DateTime  @default(now())
}

model Message {
  id        String   @id @default(nanoid(16))
  role      String
  content   String
  chatId    String
  chat      Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
  position  Int
  createdAt DateTime @default(now())

  @@index([chatId])
}
